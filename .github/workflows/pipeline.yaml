name: Build and Upload

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Code Format
        uses: weibullguy/python-lint-plus@master
        with:
          use-black: true
          use-yapf: false
          use-isort: false
          use-docformatter: false
          use-pycodestyle: false
          use-autopep8: false
          use-pydocstyle: false
          use-mypy: false
          use-pylint: false
          use-flake8: false
          use-mccabe: false
          use-radon: false
          use-rstcheck: false
          use-check-manifest: false
          use-pyroma: false

      - name: Automatic Tagging of Releases
        uses: rymndhng/release-on-push-action@master
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          bump_version_scheme: patch
          release_body: "The official release for rattifyapi"

      - name: Check Release Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
        env:
          VERSION: ${{ steps.release.outputs.version }}

      - name: "Installs and upgrades pip, installs other dependencies and installs the package from setup.py"
        env:
          VERSION: ${{ steps.release.outputs.version }}
        run: |
          # Upgrade pip
          python3 -m pip install --upgrade pip
          # Install build deps
          python3 -m pip install setuptools wheel twine
          # If requirements.txt exists, install from it
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install the package from setup.py
          export VERSION=${{ steps.release.outputs.version }}
          echo $VERSION
          python3 setup.py install

      # Upload to rattifyapi PyPi
      - name: Build and Upload to rattifyapi PyPi
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          VERSION: ${{ steps.release.outputs.version }}
        run: |
          export VERSION=${{ steps.release.outputs.version }}
          echo $VERSION
          python3 setup.py sdist bdist_wheel
          ls -la dist/
          python3 -m twine upload --skip-existing dist/*
